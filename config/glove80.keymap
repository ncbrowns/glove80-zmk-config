/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers

#define DEFAULT 0
#define LOWER 1
#define MAGIC 2
#define FACTORY_TEST 3

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        home_row_left: home_row_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <270>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <250>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
            hold-trigger-key-positions = <52 53 54 69 70 71 79 5 6 7 8 9 16 17 18 19 20 21 28 29 30 31 32 33 40 41 42 43 44 45 55 56 57 58 59 60 61 62 63 72 73 74 75 76 77 78 79>;
        };

        home_row_right: home_row_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <270>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <250>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
            hold-trigger-key-positions = <54 55 56 57 72 73 74 52 53 54 64 65 66 67 68 69 70 71 0 1 2 3 4 10 11 12 13 14 15 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 52 64 65 66 67 68 69>;
        };

        home_row_left_index: home_row_left_index {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_LEFT_INDEX";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <170>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
            hold-trigger-key-positions = <52 53 54 69 70 71 79 5 6 7 8 9 16 17 18 19 20 21 28 29 30 31 32 33 40 41 42 43 44 45 55 56 57 58 59 60 61 62 63 72 73 74 75 76 77 78 79>;
        };

        home_row_right_index: home_row_right_index {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_RIGHT_INDEX";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <170>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
            hold-trigger-key-positions = <54 55 56 57 72 73 74 52 53 54 64 65 66 67 68 69 70 71 0 1 2 3 4 10 11 12 13 14 15 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 52 64 65 66 67 68 69>;
        };

        shift_caps: shift_caps {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFT_CAPS";
            #binding-cells = <0>;
            bindings = <&kp LSHIFT>, <&entercw>;
        };

        thumb_mods: thumb_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "THUMB_MODS";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <2500>;
            require-prior-idle-ms = <250>;
            quick-tap-ms = <300>;
            flavor = "hold-preferred";
            retro-tap;
        };

        thumb_layer: thumb_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "THUMB_LAYER";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <2500>;
            require-prior-idle-ms = <250>;
            quick-tap-ms = <300>;
            flavor = "hold-preferred";
            retro-tap;
        };

        cwnumber: cwnumber {
            compatible = "zmk,behavior-mod-morph";
            label = "CWNUMBER";
            bindings = <&trans>, <&exitcw>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        cwbackspace: cwbackspace {
            compatible = "zmk,behavior-hold-tap";
            label = "CWBACKSPACE";
            bindings = <&exitcw>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <2500>;
            require-prior-idle-ms = <250>;
            quick-tap-ms = <300>;
            flavor = "hold-preferred";
            retro-tap;
        };

        cwholdtap: cwholdtap {
            compatible = "zmk,behavior-hold-tap";
            label = "CWHOLDTAP";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            flavor = "tap-preferred";
            quick-tap-ms = <0>;
            bindings = <&cwsuspend>, <&cwsuspend>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };

        thanks_pat: thanks_pat {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap_time 5>,
                <&kp LS(T) &kp H &kp A &kp N &kp K &kp S &kp COMMA &kp LS(RET) &kp LS(P) &kp A &kp T>;

            label = "THANKS_PAT";
        };

        triple_bquote: triple_bquote {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp GRAVE &kp GRAVE>;
            label = "TRIPLE_BQUOTE";
        };

        browser_copy_url: browser_copy_url {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(D) &kp LC(C) &kp ESCAPE &kp TAB>;
            label = "BROWSER_COPY_URL";
        };

        tab_switch: tab_switch {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER &mo 6>,
                <&macro_tap>,
                <&macro_param_2to1 &kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER &mo 6>;

            label = "TAB_SWITCH";
        };

        curly_pair: curly_pair {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACE &kp RBRC &kp LEFT>;
            label = "CURLY_PAIR";
        };

        paren_pair: paren_pair {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LPAR &kp RPAR &kp LEFT>;
            label = "PAREN_PAIR";
        };

        bracket_pair: bracket_pair {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LBKT &kp RBKT &kp LEFT>;
            label = "BRACKET_PAIR";
        };

        arrow: arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT>;
            label = "ARROW";
        };

        add_equal: add_equal {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &kp EQUAL>;
            label = "ADD_EQUAL";
        };

        double_tap: double_tap {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "DOUBLE_TAP";
        };

        flash_toggle_layer: flash_toggle_layer {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&rgb_ug_status_macro &macro_param_1to1 &tog MACRO_PLACEHOLDER>;
            label = "FLASH_TOGGLE_LAYER";
        };

        exitcw: trans_wrapper {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&trans &flash_toggle_layer 5>;
            label = "TRANS_WRAPPER";
        };

        entercw: caps_word_enter {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&tog 5 &caps_word>;
            label = "CAPS_WORD_ENTER";
        };

        cwsuspend: cwsuspend {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&kp F24 &macro_param_1to1 &kp MACRO_PLACEHOLDER &caps_word>;
            label = "CWSUSPEND";
        };
    };

    combos { compatible = "zmk,combos"; };

    keymap {
        compatible = "zmk,keymap";

        Base {
            bindings = <
&kp F1       &kp F2                 &kp F3                 &kp F4                  &kp F5                                                                                                                                                              &kp F6                         &kp F7                   &kp F8                  &kp F9                     &kp F10
&kp EQUAL    &kp N1                 &kp N2                 &kp N3                  &kp N4                        &kp N5                                                                                                                        &kp N6  &kp N7                         &kp N8                   &kp N9                  &kp N0                     &kp MINUS
&kp TAB      &kp Q                  &kp W                  &kp E                   &kp R                         &kp T                                                                                                                         &kp Y   &kp U                          &kp I                    &kp O                   &kp P                      &kp BSLH
&kp ESC      &home_row_left LGUI A  &home_row_left LALT S  &home_row_left LCTRL D  &home_row_left_index LSHFT F  &kp G                                                                                                                         &kp H   &home_row_right_index RSHFT J  &home_row_right RCTRL K  &home_row_right RALT L  &home_row_right RGUI SEMI  &kp SQT
&shift_caps  &kp Z                  &kp X                  &kp C                   &kp V                         &kp B   &thumb_layer 4 ESCAPE     &thumb_mods LALT C_PP  &kp LGUI    &kp RGUI    &thumb_mods RALT C_MUTE  &thumb_layer 2 TAB  &kp N   &kp M                          &kp COMMA                &kp DOT                 &kp FSLH                   &shift_caps
&kp LCTRL    &kp HOME               &kp END                &kp LEFT                &kp RIGHT                             &thumb_layer 1 BACKSPACE  &thumb_layer 3 DELETE  &magic 7 0  &magic 7 0  &thumb_layer 3 ENTER     &kp SPACE                   &kp UP                         &kp DOWN                 &kp LBKT                &kp RBKT                   &kp INSERT
            >;
        };

        Navigation {
            bindings = <
&kp PRINTSCREEN  &kp SYSREQ  &kp C_PREV  &kp C_PP   &kp C_NEXT                                                                                                            &kp C_VOL_DN       &kp C_MUTE       &kp C_VOL_UP   &kp SCROLLLOCK  &kp PAUSE_BREAK
&trans           &trans      &trans      &trans     &trans      &trans                                                                                &trans              &trans             &trans           &trans         &trans          &trans
&trans           &trans      &trans      &trans     &trans      &trans                                                                                &kp HOME            &kp PAGE_DOWN      &kp PAGE_UP      &kp END        &thanks_pat     &trans
&trans           &kp LGUI    &kp LALT    &kp LCTRL  &kp LSHFT   &trans                                                                                &kp LEFT            &kp DOWN           &kp UP           &kp RIGHT      &trans          &trans
&trans           &trans      &trans      &trans     &trans      &trans  &trans  &trans  &trans                 &trans                 &trans  &trans  &kp LC(LEFT_ARROW)  &kp LC(PAGE_DOWN)  &kp LC(PAGE_UP)  &kp LC(RIGHT)  &trans          &trans
&trans           &trans      &trans      &trans     &trans              &trans  &trans  &flash_toggle_layer 1  &flash_toggle_layer 1  &trans  &trans                      &trans             &trans           &trans         &trans          &trans
            >;
        };

        LeftWithMouse {
            bindings = <
&kp PRINTSCREEN  &kp SYSREQ  &kp C_PREV                 &kp C_PP              &kp C_NEXT                                                                                                                                     &kp C_VOL_DN  &kp C_MUTE  &kp C_VOL_UP  &kp SCROLLLOCK  &kp PAUSE_BREAK
&trans           &trans      &trans                     &trans                &trans                 &trans                                                                                                          &trans  &trans        &trans      &trans        &trans          &trans
&kp LC(LA(F3))   &trans      &tab_switch LCTRL LS(TAB)  &tab_switch LALT TAB  &tab_switch LCTRL TAB  &trans                                                                                                          &trans  &trans        &trans      &trans        &thanks_pat     &trans
&kp LC(LA(F2))   &sk LGUI    &sk LALT                   &sk LCTRL             &sk LSHFT              &trans                                                                                                          &trans  &kp RSHIFT    &kp RCTRL   &kp RALT      &kp RGUI        &trans
&kp LA(LC(F1))   &kp LC(Z)   &kp LC(X)                  &kp LC(C)             &kp LC(V)              &browser_copy_url  &trans  &trans  &trans                 &trans                 &trans  &flash_toggle_layer 2  &trans  &trans        &trans      &trans        &trans          &trans
&trans           &trans      &trans                     &trans                &trans                                    &trans  &trans  &flash_toggle_layer 2  &flash_toggle_layer 2  &trans  &trans                         &trans        &trans      &trans        &trans          &trans
            >;
        };

        Symbol {
            bindings = <
&trans  &trans          &trans        &trans       &trans                                                                                                                                                 &trans                &trans                 &trans         &trans            &trans
&trans  &trans          &trans        &trans       &trans         &trans                                                                                                                     &trans       &trans                &trans                 &trans         &trans            &trans
&trans  &kp GRAVE       &kp CARET     &kp PIPE     &kp AMPERSAND  &kp QUESTION                                                                                                               &kp AT_SIGN  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp LESS_THAN  &kp GREATER_THAN  &trans
&trans  &kp TILDE       &kp ASTERISK  &kp MINUS    &kp PLUS       &trans                                                                                                                     &kp DOLLAR   &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp EQUAL      &kp EXCLAMATION   &trans
&trans  &triple_bquote  &trans        &kp PERCENT  &kp SLASH      &kp BACKSLASH  &trans  &trans                 &trans                 &trans                 &trans                 &trans  &kp HASH     &kp LEFT_BRACKET      &kp RBKT               &kp DOT        &arrow            &trans
&trans  &trans          &trans        &trans       &trans                        &trans  &flash_toggle_layer 3  &flash_toggle_layer 3  &flash_toggle_layer 3  &flash_toggle_layer 3  &trans               &trans                &trans                 &trans         &trans            &trans
            >;
        };

        FunctionKeys {
            bindings = <
&trans  &trans    &trans    &trans     &trans                                                                                                                  &trans  &trans   &trans   &trans   &trans
&trans  &trans    &trans    &trans     &trans     &trans                                                                                               &trans  &trans  &trans   &trans   &trans   &trans
&trans  &trans    &trans    &trans     &trans     &trans                                                                                               &trans  &kp F9  &kp F10  &kp F11  &kp F12  &trans
&trans  &sk LGUI  &sk LALT  &sk LCTRL  &sk LSHFT  &trans                                                                                               &trans  &kp F5  &kp F6   &kp F7   &kp F8   &trans
&trans  &trans    &trans    &trans     &trans     &trans  &flash_toggle_layer 4  &trans  &trans                 &trans                 &trans  &trans  &trans  &kp F1  &kp F2   &kp F3   &kp F4   &trans
&trans  &trans    &trans    &trans     &trans             &trans                 &trans  &flash_toggle_layer 4  &flash_toggle_layer 4  &trans  &trans          &trans  &trans   &trans   &trans   &trans
            >;
        };

        CapsWord {
            bindings = <
&exitcw     &exitcw    &exitcw             &exitcw    &exitcw                                                                                                 &exitcw    &exitcw    &exitcw    &exitcw    &exitcw
&exitcw     &cwnumber  &cwnumber           &cwnumber  &cwnumber  &cwnumber                                                                         &cwnumber  &cwnumber  &cwnumber  &cwnumber  &cwnumber  &cwholdtap MINUS UNDERSCORE
&exitcw     &trans     &trans              &trans     &trans     &trans                                                                            &trans     &trans     &trans     &trans     &trans     &exitcw
&exitcw     &trans     &cwholdtap S LS(S)  &trans     &trans     &trans                                                                            &trans     &trans     &trans     &trans     &exitcw    &exitcw
&kp LSHIFT  &trans     &trans              &trans     &trans     &trans     &exitcw                   &exitcw  &exitcw  &exitcw  &exitcw  &exitcw  &trans     &trans     &exitcw    &exitcw    &exitcw    &kp RSHIFT
&trans      &exitcw    &exitcw             &exitcw    &exitcw               &cwbackspace 0 BACKSPACE  &exitcw  &exitcw  &trans   &exitcw  &exitcw             &exitcw    &exitcw    &exitcw    &exitcw    &exitcw
            >;
        };

        TabSwitcher {
            bindings = <
&none  &none  &none        &none     &none                                                                    &none         &none         &none    &none  &none
&none  &none  &none        &none     &none      &none                                            &none        &none         &none         &none    &none  &none
&none  &none  &none        &none     &none      &none                                            &none        &none         &none         &none    &none  &none
&none  &none  &kp LS(TAB)  &none     &kp TAB    &none                                            &kp LS(TAB)  &kp DOWN      &kp UP_ARROW  &kp TAB  &none  &none
&none  &none  &none        &none     &none      &none  &none  &none  &none  &none  &none  &none  &none        &none         &none         &none    &none  &none
&none  &none  &none        &kp LEFT  &kp RIGHT         &none  &none  &none  &none  &none  &none               &kp UP_ARROW  &kp DOWN      &none    &none  &none
            >;
        };

        System {
            bindings = <
&bt BT_CLR    &none            &none            &none            &none                                                                                                                                              &none  &none  &none  &none  &bt BT_CLR_ALL
&out OUT_USB  &bt_0            &bt_1            &bt_2            &bt_3            &none                                                                                                                      &none  &none  &none  &none  &none  &none
&none         &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                                                                            &none  &none  &none  &none  &none  &none
&bootloader   &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                                                                            &none  &none  &none  &none  &none  &bootloader
&sys_reset    &none            &none            &none            &none            &none            &flash_toggle_layer 4  &none                  &none  &none  &none                  &flash_toggle_layer 4  &none  &none  &none  &none  &none  &sys_reset
&none         &none            &none            &none            &none                             &flash_toggle_layer 1  &flash_toggle_layer 3  &none  &none  &flash_toggle_layer 3  &flash_toggle_layer 1         &none  &none  &none  &none  &none
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
