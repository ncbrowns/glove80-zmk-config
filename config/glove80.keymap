/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers

#define DEFAULT 0
#define LOWER 1
#define MAGIC 2
#define FACTORY_TEST 3

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        home_row_left: home_row_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <270>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <250>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
            hold-trigger-key-positions = <52 53 54 69 70 71 79 5 6 7 8 9 16 17 18 19 20 21 28 29 30 31 32 33 40 41 42 43 44 45 55 56 57 58 59 60 61 62 63 72 73 74 75 76 77 78 79>;
        };

        home_row_right: home_row_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <270>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <250>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
            hold-trigger-key-positions = <54 55 56 57 72 73 74 52 53 54 64 65 66 67 68 69 70 71 0 1 2 3 4 10 11 12 13 14 15 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 52 64 65 66 67 68 69>;
        };

        home_row_left_index: home_row_left_index {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_LEFT_INDEX";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <170>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
            hold-trigger-key-positions = <52 53 54 69 70 71 79 5 6 7 8 9 16 17 18 19 20 21 28 29 30 31 32 33 40 41 42 43 44 45 55 56 57 58 59 60 61 62 63 72 73 74 75 76 77 78 79>;
        };

        home_row_right_index: home_row_right_index {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_RIGHT_INDEX";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <170>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
            hold-trigger-key-positions = <54 55 56 57 72 73 74 52 53 54 64 65 66 67 68 69 70 71 0 1 2 3 4 10 11 12 13 14 15 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 52 64 65 66 67 68 69>;
        };

        shift_caps: shift_caps {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFT_CAPS";
            #binding-cells = <0>;
            bindings = <&kp LSHIFT>, <&flash_toggle_layer 4>;
        };

        caps_word_hold_tap: caps_word_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "CAPS_WORD_HOLD_TAP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            flavor = "tap-preferred";
            quick-tap-ms = <0>;
        };

        curly_morph: curly_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "CURLY_MORPH";
            bindings = <&kp LEFT_BRACE>, <&curly_pair>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        paren_morph: paren_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "PAREN_MORPH";
            bindings = <&kp LEFT_PARENTHESIS>, <&paren_pair>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        bracket_morph: bracket_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "BRACKET_MORPH";
            bindings = <&kp LEFT_BRACKET>, <&bracket_pair>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        sym_or_eq: sym_or_eq {
            compatible = "zmk,behavior-hold-tap";
            label = "SYM_OR_EQ";
            bindings = <&add_equal>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        td_plus: td_plus {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_PLUS";
            #binding-cells = <0>;
            bindings = <&sym_or_eq PLUS PLUS>, <&double_tap PLUS>;
        };

        td_minus: td_minus {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_MINUS";
            #binding-cells = <0>;
            bindings = <&sym_or_eq MINUS MINUS>, <&double_tap MINUS>;
        };

        td_eq: td_eq {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_EQ";
            #binding-cells = <0>;
            bindings = <&sym_or_eq EQUAL EQUAL>, <&double_tap EQUAL>;
        };

        td_not: td_not {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_NOT";
            #binding-cells = <0>;
            bindings = <&sym_or_eq EXCL EXCL>, <&double_tap EXCL>;
        };

        td_lt: td_lt {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_LT";
            #binding-cells = <0>;
            bindings = <&sym_or_eq LT LT>, <&double_tap LT>;
        };

        td_gt: td_gt {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_GT";
            #binding-cells = <0>;
            bindings = <&sym_or_eq GT GT>, <&double_tap GT>;
        };

        td_or: td_or {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_OR";
            #binding-cells = <0>;
            bindings = <&sym_or_eq PIPE PIPE>, <&double_tap PIPE>;
        };

        td_and: td_and {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_AND";
            #binding-cells = <0>;
            bindings =
                <&sym_or_eq AMPERSAND AMPERSAND>,
                <&double_tap AMPERSAND>;
        };

        td_xor: td_xor {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_XOR";
            #binding-cells = <0>;
            bindings = <&sym_or_eq CARET CARET>, <&double_tap CARET>;
        };

        td_slash: td_slash {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SLASH";
            #binding-cells = <0>;
            bindings = <&sym_or_eq SLASH SLASH>, <&double_tap SLASH>;
        };

        thumb_mods: thumb_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "THUMB_MODS";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <2500>;
            require-prior-idle-ms = <250>;
            quick-tap-ms = <300>;
            flavor = "hold-preferred";
            retro-tap;
        };

        esc_sym: esc_sym {
            compatible = "zmk,behavior-tap-dance";
            label = "ESC_SYM";
            #binding-cells = <0>;
            bindings = <&lt 2 ESC>, <&flash_toggle_layer 2>;
        };

        td_nav: td_nav {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_NAV";
            #binding-cells = <0>;
            bindings = <&lt 1 TAB>, <&flash_toggle_layer 1>;
        };

        thumb_layer: thumb_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "THUMB_LAYER";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <2500>;
            require-prior-idle-ms = <250>;
            quick-tap-ms = <300>;
            flavor = "hold-preferred";
            retro-tap;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };

        thanks_pat: thanks_pat {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap_time 5>,
                <&kp LS(T) &kp H &kp A &kp N &kp K &kp S &kp COMMA &kp LS(RET) &kp LS(P) &kp A &kp T>;

            label = "THANKS_PAT";
        };

        triple_bquote: triple_bquote {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp GRAVE &kp GRAVE>;
            label = "TRIPLE_BQUOTE";
        };

        browser_copy_url: browser_copy_url {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(D) &kp LC(C) &kp ESCAPE &kp TAB>;
            label = "BROWSER_COPY_URL";
        };

        caps_word_exit: caps_word_exit {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &flash_toggle_layer 4>;
            label = "CAPS_WORD_EXIT";
        };

        tab_switch: tab_switch {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER &mo 5>,
                <&macro_tap>,
                <&macro_param_2to1 &kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER &mo 5>;

            label = "TAB_SWITCH";
        };

        curly_pair: curly_pair {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACE &kp RBRC &kp LEFT>;
            label = "CURLY_PAIR";
        };

        paren_pair: paren_pair {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LPAR &kp RPAR &kp LEFT>;
            label = "PAREN_PAIR";
        };

        bracket_pair: bracket_pair {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LBKT &kp RBKT &kp LEFT>;
            label = "BRACKET_PAIR";
        };

        arrow: arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT>;
            label = "ARROW";
        };

        add_equal: add_equal {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &kp EQUAL>;
            label = "ADD_EQUAL";
        };

        double_tap: double_tap {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "DOUBLE_TAP";
        };

        flash_toggle_layer: flash_toggle_layer {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&rgb_ug_status_macro &macro_param_1to1 &tog MACRO_PLACEHOLDER>;
            label = "FLASH_TOGGLE_LAYER";
        };
    };

    combos { compatible = "zmk,combos"; };

    keymap {
        compatible = "zmk,keymap";

        Base {
            bindings = <
&kp F1       &kp F2                 &kp F3                 &kp F4                  &kp F5                                                                                                                                                                &kp F6                         &kp F7                   &kp F8                  &kp F9                     &kp F10
&kp EQUAL    &kp N1                 &kp N2                 &kp N3                  &kp N4                        &kp N5                                                                                                                          &kp N6  &kp N7                         &kp N8                   &kp N9                  &kp N0                     &kp MINUS
&kp TAB      &kp Q                  &kp W                  &kp E                   &kp R                         &kp T                                                                                                                           &kp Y   &kp U                          &kp I                    &kp O                   &kp P                      &kp BSLH
&kp ESC      &home_row_left LGUI A  &home_row_left LALT S  &home_row_left LCTRL D  &home_row_left_index LSHFT F  &kp G                                                                                                                           &kp H   &home_row_right_index RSHFT J  &home_row_right RCTRL K  &home_row_right RALT L  &home_row_right RGUI SEMI  &kp SQT
&shift_caps  &kp Z                  &kp X                  &kp C                   &kp V                         &kp B   &thumb_layer 3 ESCAPE     &thumb_mods LALT C_PP  &kp LGUI    &kp RGUI    &thumb_mods RALT C_MUTE  &thumb_layer 3 TAB    &kp N   &kp M                          &kp COMMA                &kp DOT                 &kp FSLH                   &shift_caps
&kp LCTRL    &kp HOME               &kp END                &kp LEFT                &kp RIGHT                             &thumb_layer 1 BACKSPACE  &thumb_layer 2 DELETE  &magic 6 0  &magic 6 0  &thumb_layer 2 ENTER     &thumb_layer 1 SPACE          &kp UP                         &kp DOWN                 &kp LBKT                &kp RBKT                   &kp INSERT
            >;
        };

        Navigation {
            bindings = <
&kp PRINTSCREEN  &kp SYSREQ    &kp C_PREV     &kp C_PP              &kp C_NEXT                                                                                                                                          &kp C_VOL_DN       &kp C_MUTE       &kp C_VOL_UP   &kp SCROLLLOCK  &kp PAUSE_BREAK
&kp LC(LA(F3))   &kp F1        &kp F2         &kp F3                &kp F4                     &kp F5                                                                                               &kp F6              &kp F7             &kp F8           &kp F9         &kp F10         &kp F11
&kp LC(LA(F2))   &kp LA(LEFT)  &kp LA(RIGHT)  &tab_switch LALT TAB  &tab_switch LCTRL LS(TAB)  &tab_switch LCTRL TAB                                                                                &kp HOME            &kp PAGE_DOWN      &kp PAGE_UP      &kp END        &thanks_pat     &kp F12
&kp LC(LA(F1))   &sk LGUI      &sk LALT       &sk LCTRL             &sk LSHFT                  &trans                                                                                               &kp LEFT            &kp DOWN           &kp UP           &kp RIGHT      &trans          &trans
&trans           &kp LC(Z)     &kp LC(X)      &kp LC(C)             &kp LC(V)                  &browser_copy_url      &trans  &trans  &trans                 &trans                 &trans  &trans  &kp LC(LEFT_ARROW)  &kp LC(PAGE_DOWN)  &kp LC(PAGE_UP)  &kp LC(RIGHT)  &trans          &trans
&trans           &trans        &trans         &trans                &trans                                            &trans  &trans  &flash_toggle_layer 1  &flash_toggle_layer 1  &trans  &trans                      &trans             &trans           &trans         &trans          &trans
            >;
        };

        Symbol {
            bindings = <
&trans  &trans          &trans        &trans       &trans                                                                                                                   &trans                &trans                 &trans         &trans            &trans
&trans  &trans          &trans        &trans       &trans         &trans                                                                                       &trans       &trans                &trans                 &trans         &trans            &trans
&trans  &kp GRAVE       &kp CARET     &kp PIPE     &kp AMPERSAND  &kp QUESTION                                                                                 &kp AT_SIGN  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp LESS_THAN  &kp GREATER_THAN  &trans
&trans  &kp TILDE       &kp ASTERISK  &kp MINUS    &kp PLUS       &trans                                                                                       &kp DOLLAR   &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp EQUAL      &kp EXCLAMATION   &trans
&trans  &triple_bquote  &trans        &kp PERCENT  &kp SLASH      &kp BACKSLASH  &trans  &trans  &trans                 &trans                 &trans  &trans  &kp HASH     &kp LEFT_BRACKET      &kp RBKT               &kp DOT        &arrow            &trans
&trans  &trans          &trans        &trans       &trans                        &trans  &trans  &flash_toggle_layer 2  &flash_toggle_layer 2  &trans  &trans               &trans                &trans                 &trans         &trans            &trans
            >;
        };

        FunctionKeys {
            bindings = <
&trans  &trans    &trans    &trans     &trans                                                                                                   &trans  &trans   &trans   &trans   &trans
&trans  &trans    &trans    &trans     &trans     &trans                                                                                &trans  &trans  &trans   &trans   &trans   &trans
&trans  &trans    &trans    &trans     &trans     &trans                                                                                &trans  &kp F9  &kp F10  &kp F11  &kp F12  &trans
&trans  &sk LGUI  &sk LALT  &sk LCTRL  &sk LSHFT  &trans                                                                                &trans  &kp F5  &kp F6   &kp F7   &kp F8   &trans
&trans  &trans    &trans    &trans     &trans     &trans  &trans  &trans  &trans                 &trans                 &trans  &trans  &trans  &kp F1  &kp F2   &kp F3   &kp F4   &trans
&trans  &trans    &trans    &trans     &trans             &trans  &trans  &flash_toggle_layer 3  &flash_toggle_layer 3  &trans  &trans          &trans  &trans   &trans   &trans   &trans
            >;
        };

        CapsWord {
            bindings = <
&caps_word_exit F1      &caps_word_exit F2    &caps_word_exit F3           &caps_word_exit F4    &caps_word_exit F5                                                                                                                                                  &caps_word_exit F6        &caps_word_exit F7     &caps_word_exit F8            &caps_word_exit F9             &caps_word_exit F10
&caps_word_exit EQUAL   &kp N1                &kp N2                       &kp N3                &kp N4                 &kp N5                                                                                                                            &kp N6     &kp N7                    &kp N8                 &kp N9                        &kp N0                         &caps_word_hold_tap MINUS LS(MINUS)
&caps_word_exit TAB     &kp LS(Q)             &kp LS(W)                    &kp LS(E)             &kp LS(R)              &kp LS(T)                                                                                                                         &kp LS(Y)  &kp LS(U)                 &kp LS(I)              &kp LS(O)                     &kp LS(P)                      &caps_word_exit BACKSLASH
&caps_word_exit ESCAPE  &kp LS(A)             &caps_word_hold_tap S LS(S)  &kp LS(D)             &kp LS(F)              &kp LS(G)                                                                                                                         &kp LS(H)  &kp LS(J)                 &kp LS(K)              &kp LS(L)                     &caps_word_exit SEMI           &caps_word_exit SQT
&trans                  &kp LS(Z)             &kp LS(X)                    &kp LS(C)             &kp LS(V)              &kp LS(B)  &trans  &trans               &trans                 &trans                 &trans               &trans                 &kp LS(N)  &kp LS(M)                 &caps_word_exit COMMA  &caps_word_exit PERIOD        &caps_word_exit SLASH          &trans
&trans                  &caps_word_exit HOME  &caps_word_exit END          &caps_word_exit LEFT  &caps_word_exit RIGHT             &trans  &caps_word_exit DEL  &flash_toggle_layer 4  &flash_toggle_layer 4  &caps_word_exit RET  &caps_word_exit SPACE             &caps_word_exit UP_ARROW  &caps_word_exit DOWN   &caps_word_exit LEFT_BRACKET  &caps_word_exit RIGHT_BRACKET  &caps_word_exit INS
            >;
        };

        TabSwitcher {
            bindings = <
&none  &none  &none        &none  &none                                                                  &none         &none         &none    &none  &none
&none  &none  &none        &none  &none    &none                                            &none        &none         &none         &none    &none  &none
&none  &none  &none        &none  &none    &none                                            &none        &none         &none         &none    &none  &none
&none  &none  &kp LS(TAB)  &none  &kp TAB  &none                                            &kp LS(TAB)  &kp DOWN      &kp UP_ARROW  &kp TAB  &none  &none
&none  &none  &none        &none  &none    &none  &none  &none  &none  &none  &none  &none  &none        &none         &none         &none    &none  &none
&none  &none  &none        &none  &none           &none  &none  &none  &none  &none  &none               &kp UP_ARROW  &kp DOWN      &none    &none  &none
            >;
        };

        System {
            bindings = <
&bt BT_CLR    &none            &none            &none            &none                                                                                                                                              &none  &none  &none  &none  &bt BT_CLR_ALL
&out OUT_USB  &bt_0            &bt_1            &bt_2            &bt_3            &none                                                                                                                      &none  &none  &none  &none  &none  &none
&none         &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                                                                            &none  &none  &none  &none  &none  &none
&bootloader   &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                                                                            &none  &none  &none  &none  &none  &bootloader
&sys_reset    &none            &none            &none            &none            &none            &flash_toggle_layer 3  &none                  &none  &none  &none                  &flash_toggle_layer 3  &none  &none  &none  &none  &none  &sys_reset
&none         &none            &none            &none            &none                             &flash_toggle_layer 1  &flash_toggle_layer 2  &none  &none  &flash_toggle_layer 2  &flash_toggle_layer 1         &none  &none  &none  &none  &none
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
