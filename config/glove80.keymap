/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers

#define DEFAULT 0
#define LOWER 1
#define MAGIC 2
#define FACTORY_TEST 3

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        lower_layer: lower_layer {
            compatible = "zmk,behavior-tap-dance";
            label = "LOWER_LAYER";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 0>, <&to 0>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        home_row_left: home_row_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <270>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
            hold-trigger-key-positions = <52 53 54 69 70 71 79 5 6 7 8 9 16 17 18 19 20 21 28 29 30 31 32 33 40 41 42 43 44 45 55 56 57 58 59 60 61 62 63 72 73 74 75 76 77 78 79>;
        };

        home_row_right: home_row_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <270>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
            hold-trigger-key-positions = <54 55 56 57 72 73 74 52 53 54 64 65 66 67 68 69 70 71 0 1 2 3 4 10 11 12 13 14 15 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 52 64 65 66 67 68 69>;
        };

        shift_caps: shift_caps {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFT_CAPS";
            #binding-cells = <0>;
            bindings = <&kp LSHIFT>, <&tog 3>;
        };

        nav_layer: nav_layer {
            compatible = "zmk,behavior-tap-dance";
            label = "NAV_LAYER";
            #binding-cells = <0>;
            bindings = <&mo 1>, <&tog 1>;
        };

        layer_sticky_tap_or_hold: layer_sticky_tap_or_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_STICKY_TAP_OR_HOLD";
            bindings = <&mo>, <&sl>;

            #binding-cells = <2>;
            tapping-term-ms = <500>;
        };

        sym_nav_lock: sym_nav_lock {
            compatible = "zmk,behavior-tap-dance";
            label = "SYM_NAV_LOCK";
            #binding-cells = <0>;
            bindings = <&layer_sticky_tap_or_hold 1 2>, <&tog 1>;
        };

        hold_tap_keys: hold_tap_keys {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_KEYS";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        alt_tab: alt_tab {
            compatible = "zmk,behavior-hold-tap";
            label = "ALT_TAB";
            bindings = <&alt_tab_layer>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        ctrl_tab: ctrl_tab {
            compatible = "zmk,behavior-hold-tap";
            label = "CTRL_TAB";
            bindings = <&ctrl_tab_layer>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };

        thanks_pat: thanks_pat {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(T) &kp H &kp A &kp N &kp K &kp S &kp COMMA &kp LS(RET) &kp LS(P) &kp A &kp T>;
            label = "THANKS_PAT";
        };

        triple_bquote: triple_bquote {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp GRAVE &kp GRAVE>;
            label = "TRIPLE_BQUOTE";
        };

        browser_copy_url: browser_copy_url {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(D) &kp LC(C) &kp ESCAPE &kp TAB>;
            label = "BROWSER_COPY_URL";
        };

        caps_word_exit: caps_word_exit {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &tog 3>;
            label = "CAPS_WORD_EXIT";
        };

        alt_tab_layer: alt_tab_layer {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp TAB &mo 5>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LALT>;

            label = "ALT_TAB_LAYER";
        };

        ctrl_tab_layer: ctrl_tab_layer {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&kp LCTRL>,
                <&macro_tap>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER &mo 5>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LCTRL>;

            label = "CTRL_TAB_LAYER";
        };
    };

    combos { compatible = "zmk,combos"; };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
&kp F1       &kp F2    &kp F3   &kp F4    &kp F5                                                                                              &kp F6  &kp F7     &kp F8    &kp F9    &kp F10
&kp EQUAL    &kp N1    &kp N2   &kp N3    &kp N4     &kp N5                                                                           &kp N6  &kp N7  &kp N8     &kp N9    &kp N0    &kp MINUS
&kp TAB      &kp Q     &kp W    &kp E     &kp R      &kp T                                                                            &kp Y   &kp U   &kp I      &kp O     &kp P     &kp BSLH
&kp ESC      &kp A     &kp S    &kp D     &kp F      &kp G                                                                            &kp H   &kp J   &kp K      &kp L     &kp SEMI  &kp SQT
&shift_caps  &kp Z     &kp X    &kp C     &kp V      &kp B   &sym_nav_lock  &kp LCTRL   &kp LWIN  &kp RWIN  &kp RCTRL  &sym_nav_lock  &kp N   &kp M   &kp COMMA  &kp DOT   &kp FSLH  &shift_caps
&magic 4 0   &kp HOME  &kp END  &kp LEFT  &kp RIGHT          &kp BSPC       &kp DELETE  &kp LALT  &kp RALT  &kp ENTER  &kp SPACE              &kp UP  &kp DOWN   &kp LBKT  &kp RBKT  &kp INSERT
            >;
        };

        Navigation {
            bindings = <
&kp PRINTSCREEN  &kp SYSREQ  &kp C_PREV  &kp C_PP            &kp C_NEXT                                                                                                                        &kp C_VOL_DN       &kp C_MUTE       &kp C_VOL_UP   &kp SCROLLLOCK  &kp PAUSE_BREAK
&trans           &kp F1      &kp F2      &kp F3              &kp F4                             &kp F5                                                                     &kp F6              &kp F7             &kp F8           &kp F9         &kp F10         &kp F11
&trans           &trans      &none       &alt_tab 0 LA(TAB)  &ctrl_tab LS(LC(TAB)) LC(LS(TAB))  &ctrl_tab LC(TAB) LC(TAB)                                                  &kp HOME            &kp PAGE_DOWN      &kp PAGE_UP      &kp END        &thanks_pat     &kp F12
&trans           &sk LGUI    &sk LALT    &sk LCTRL           &sk LSHFT                          &trans                                                                     &kp LEFT            &kp DOWN           &kp UP           &kp RIGHT      &trans          &trans
&trans           &kp LC(Z)   &kp LC(X)   &kp LC(C)           &kp LC(V)                          &browser_copy_url          &tog 1  &trans  &trans  &trans  &trans  &tog 1  &kp LC(LEFT_ARROW)  &kp LC(PAGE_DOWN)  &kp LC(PAGE_UP)  &kp LC(RIGHT)  &trans          &trans
&trans           &trans      &trans      &trans              &trans                                                        &trans  &trans  &trans  &trans  &trans  &trans                      &trans             &trans           &trans         &trans          &trans
            >;
        };

        Symbol {
            bindings = <
&trans  &trans          &trans  &trans  &trans                                                                  &trans        &trans        &trans  &trans  &trans
&trans  &trans          &trans  &trans  &trans  &trans                                                  &trans  &trans        &trans        &trans  &trans  &trans
&trans  &kp GRAVE       &trans  &trans  &trans  &trans                                                  &trans  &kp LS(LBRC)  &kp LS(RBRC)  &trans  &trans  &trans
&trans  &kp TILDE       &trans  &trans  &trans  &trans                                                  &trans  &kp LS(LPAR)  &kp LS(RPAR)  &trans  &trans  &trans
&trans  &triple_bquote  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp LBKT      &kp RBKT      &trans  &trans  &trans
&trans  &trans          &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans          &trans        &trans        &trans  &trans  &trans
            >;
        };

        CapsWord {
            bindings = <
&caps_word_exit F1      &caps_word_exit F2    &caps_word_exit F3   &caps_word_exit F4    &caps_word_exit F5                                                                                                                                 &caps_word_exit F6        &caps_word_exit F7     &caps_word_exit F8            &caps_word_exit F9             &caps_word_exit F10
&caps_word_exit EQUAL   &kp N1                &kp N2               &kp N3                &kp N4                 &kp N5                                                                                                           &kp N6     &kp N7                    &kp N8                 &kp N9                        &kp N0                         &hold_tap_keys MINUS LS(MINUS)
&caps_word_exit TAB     &kp LS(Q)             &kp LS(W)            &kp LS(E)             &kp LS(R)              &kp LS(T)                                                                                                        &kp LS(Y)  &kp LS(U)                 &kp LS(I)              &kp LS(O)                     &kp LS(P)                      &caps_word_exit BACKSLASH
&caps_word_exit ESCAPE  &kp LS(A)             &kp LS(S)            &kp LS(D)             &kp LS(F)              &kp LS(G)                                                                                                        &kp LS(H)  &kp LS(J)                 &kp LS(K)              &kp LS(L)                     &caps_word_exit SEMI           &caps_word_exit SQT
&trans                  &kp LS(Z)             &kp LS(X)            &kp LS(C)             &kp LS(V)              &kp LS(B)  &caps_word_exit F24  &trans               &trans  &trans  &trans               &caps_word_exit F24    &kp LS(N)  &kp LS(M)                 &caps_word_exit COMMA  &caps_word_exit PERIOD        &caps_word_exit SLASH          &trans
&trans                  &caps_word_exit HOME  &caps_word_exit END  &caps_word_exit LEFT  &caps_word_exit RIGHT             &trans               &caps_word_exit DEL  &trans  &trans  &caps_word_exit RET  &caps_word_exit SPACE             &caps_word_exit UP_ARROW  &caps_word_exit DOWN   &caps_word_exit LEFT_BRACKET  &caps_word_exit RIGHT_BRACKET  &caps_word_exit INS
            >;
        };

        magic_layer {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                     &none  &none  &none  &none  &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                             &none  &none  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none         &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB  &none  &none  &none         &none  &none  &none  &none  &none
            >;
        };

        AltTab {
            bindings = <
&none  &none        &none    &none  &none                                                                &none         &none         &none    &none  &none
&none  &none        &none    &none  &none  &none                                            &none        &none         &none         &none    &none  &none
&none  &none        &none    &none  &none  &none                                            &none        &none         &none         &none    &none  &none
&none  &kp LS(TAB)  &kp TAB  &none  &none  &none                                            &kp LS(TAB)  &kp DOWN      &kp UP_ARROW  &kp TAB  &none  &none
&none  &none        &none    &none  &none  &none  &none  &none  &none  &none  &none  &none  &none        &none         &none         &none    &none  &none
&none  &none        &none    &none  &none         &none  &none  &none  &none  &none  &none               &kp UP_ARROW  &kp DOWN      &none    &none  &none
            >;
        };
    };
};
